{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from flask import Flask, request, jsonify\nimport joblib\nimport pandas as pd\n\napp = Flask(__name__)\n\n# Load your pre-trained model\nmodel = joblib.load('fraud_model.pkl')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.get_json()\n\n    # Define the features your model expects\n    features = ['TransactionAmt', 'ProductCD', 'card1', 'card2','R_emaildomain','DeviceType', 'DeviceInfo','TransactionDT']  # Add all relevant features here\n\n    # Prepare the input data for prediction\n    input_data = pd.DataFrame([data], columns=features)\n\n    # Perform prediction\n    prediction = model.predict(input_data)\n    probability = model.predict_proba(input_data)[:, 1]  # Assuming binary classification\n\n    # Format response\n    response = {\n        'prediction': int(prediction[0]),\n        'probability': float(probability[0])\n    }\n\n    return jsonify(response)\n\nif __name__ == '__main__':\n    app.run(debug=True,port=8080)\n","metadata":{},"execution_count":null,"outputs":[]}]}